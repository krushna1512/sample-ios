platform :ios do
  lane :build_only do
    # Create a temporary keychain
    increment_build_number(
      xcodeproj: "SampleApp.xcodeproj",
      build_number: ENV['BUILD_NUMBER']
    )
    create_keychain(
      name: ENV['MATCH_KEYCHAIN_NAME'],
      password: ENV['MATCH_PASSWORD'],
      default_keychain: true,
      unlock: true,
      timeout: 3600,
      lock_when_sleeps: false
    )

    # Load the App Store Connect API key
    api_key = app_store_connect_api_key(
      key_id: ENV['APP_STORE_CONNECT_API_KEY_KEY_ID'],
      issuer_id: ENV['APP_STORE_CONNECT_API_KEY_ISSUER_ID'],
      key_content: ENV['APP_STORE_CONNECT_API_KEY_B64'],
      duration: 1200,
      in_house: false,
      is_key_content_base64: true
    )

    # Set deployment mode: adhoc for staging, appstore for production
    deploy_env = ENV['DEPLOY_ENVIRONMENT']
    match_type = deploy_env == 'production' ? "appstore" : "adhoc"
    export_method = deploy_env == 'production' ? "app-store" : "ad-hoc"

    UI.message("ðŸ”§ Building for #{deploy_env} using match type '#{match_type}' and export method '#{export_method}'")

    # Fetch provisioning profiles & certificates
    match(
      type: match_type,
      api_key: api_key,
      keychain_name: ENV['MATCH_KEYCHAIN_NAME'],
      keychain_password: ENV['MATCH_PASSWORD'],
      readonly: true,
      git_url: ENV["MATCH_GIT_URL"]
    )

    # Build the app
    build_app(
      project: "SampleApp.xcodeproj",
      scheme: "SampleApp",
      export_method: export_method,
      output_directory: "./build",
      clean: true
    )

    # Optionally: upload to TestFlight for production
    if deploy_env == 'production'
      upload_to_testflight(
        api_key: api_key,
        ipa: "./build/SampleApp.ipa"
      )
    end

    # Delete temporary keychain
    delete_keychain(name: ENV['MATCH_KEYCHAIN_NAME'])
  end
end
